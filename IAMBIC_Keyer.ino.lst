
C:\Users\DELTAC~1\AppData\Local\Temp\arduino_build_863077/IAMBIC_Keyer.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	21 c0       	rjmp	.+66     	; 0x44 <__ctors_end>
   2:	45 c0       	rjmp	.+138    	; 0x8e <__bad_interrupt>
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	43 c0       	rjmp	.+134    	; 0x8e <__bad_interrupt>
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	09 c2       	rjmp	.+1042   	; 0x41e <__vector_5>
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	3f c0       	rjmp	.+126    	; 0x8e <__bad_interrupt>
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	3d c0       	rjmp	.+122    	; 0x8e <__bad_interrupt>
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	3b c0       	rjmp	.+118    	; 0x8e <__bad_interrupt>
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	39 c0       	rjmp	.+114    	; 0x8e <__bad_interrupt>
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>

0000001e <__trampolines_end>:
__trampolines_start():
  1e:	00 00       	nop
  20:	00 00       	nop
  22:	36 00       	.word	0x0036	; ????

00000024 <port_to_mode_PGM>:
  24:	00 00 00 00 37 00                                   ....7.

0000002a <port_to_output_PGM>:
  2a:	00 00 00 00 38 00                                   ....8.

00000030 <digital_pin_to_port_PGM>:
  30:	02 02 02 02 02 02                                   ......

00000036 <digital_pin_to_bit_mask_PGM>:
  36:	01 02 04 08 10 20                                   ..... 

0000003c <digital_pin_to_timer_PGM>:
  3c:	01 02 00 00 04 00                                   ......

00000042 <__ctors_start>:
__ctors_start():
  42:	fa 02       	muls	r31, r26

00000044 <__ctors_end>:
__dtors_end():
  44:	11 24       	eor	r1, r1
  46:	1f be       	out	0x3f, r1	; 63
  48:	cf e5       	ldi	r28, 0x5F	; 95
  4a:	d2 e0       	ldi	r29, 0x02	; 2
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	cd bf       	out	0x3d, r28	; 61

00000050 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  50:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  52:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  54:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  56:	e6 eb       	ldi	r30, 0xB6	; 182
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  58:	f6 e0       	ldi	r31, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  5a:	02 c0       	rjmp	.+4      	; 0x60 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  5c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  5e:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  60:	aa 36       	cpi	r26, 0x6A	; 106
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  62:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  64:	d9 f7       	brne	.-10     	; 0x5c <__do_copy_data+0xc>

00000066 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  66:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  68:	aa e6       	ldi	r26, 0x6A	; 106
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  6a:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  6c:	01 c0       	rjmp	.+2      	; 0x70 <.do_clear_bss_start>

0000006e <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  6e:	1d 92       	st	X+, r1

00000070 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  70:	a8 39       	cpi	r26, 0x98	; 152
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  72:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  74:	e1 f7       	brne	.-8      	; 0x6e <.do_clear_bss_loop>

00000076 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  76:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  78:	c2 e2       	ldi	r28, 0x22	; 34
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
  7a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
  7c:	03 c0       	rjmp	.+6      	; 0x84 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
  7e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
  80:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
  82:	0d d3       	rcall	.+1562   	; 0x69e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
  84:	c1 32       	cpi	r28, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
  86:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
  88:	d1 f7       	brne	.-12     	; 0x7e <__do_global_ctors+0x8>
  8a:	13 d2       	rcall	.+1062   	; 0x4b2 <main>
  8c:	12 c3       	rjmp	.+1572   	; 0x6b2 <_exit>

0000008e <__bad_interrupt>:
__vector_1():
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <turnOffPWM>:
turnOffPWM():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	21 f4       	brne	.+8      	; 0x9c <turnOffPWM+0xc>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
  94:	8a b5       	in	r24, 0x2a	; 42
  96:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
  98:	8a bd       	out	0x2a, r24	; 42
  9a:	08 95       	ret
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	19 f4       	brne	.+6      	; 0xa6 <turnOffPWM+0x16>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
  a0:	8a b5       	in	r24, 0x2a	; 42
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	f9 cf       	rjmp	.-14     	; 0x98 <turnOffPWM+0x8>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:105
    cbi(TCCR1C,COM1D0);
    //cbi(TCCR1A,PWM1D);
  } else
    #endif
  #if defined(TCCR1) && defined(COM1A1)
  if(timer == TIMER1A){
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	21 f4       	brne	.+8      	; 0xb2 <turnOffPWM+0x22>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:106
    cbi(TCCR1, COM1A1);
  aa:	80 b7       	in	r24, 0x30	; 48
  ac:	8f 7d       	andi	r24, 0xDF	; 223
  ae:	80 bf       	out	0x30, r24	; 48
  b0:	08 95       	ret
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:125
  #endif
  } else
  #endif

  #if defined(TCCR1) && defined(COM1B1)
  if( timer == TIMER1B){
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	19 f4       	brne	.+6      	; 0xbc <turnOffPWM+0x2c>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:126
    cbi(GTCCR, COM1B1);
  b6:	8c b5       	in	r24, 0x2c	; 44
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	8c bd       	out	0x2c, r24	; 44
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:134
  #endif

    {
    }

}
  bc:	08 95       	ret

000000be <digitalWrite>:
digitalWrite():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:137

void digitalWrite(uint8_t pin, uint8_t val)
{
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:139
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
  c4:	28 2f       	mov	r18, r24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	e4 5c       	subi	r30, 0xC4	; 196
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	84 91       	lpm	r24, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:140
  uint8_t bit = digitalPinToBitMask(pin);
  d0:	f9 01       	movw	r30, r18
  d2:	ea 5c       	subi	r30, 0xCA	; 202
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	d4 91       	lpm	r29, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:141
  uint8_t port = digitalPinToPort(pin);
  d8:	f9 01       	movw	r30, r18
  da:	e0 5d       	subi	r30, 0xD0	; 208
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	c4 91       	lpm	r28, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:144
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
  e0:	cc 23       	and	r28, r28
  e2:	a1 f0       	breq	.+40     	; 0x10c <digitalWrite+0x4e>
  e4:	16 2f       	mov	r17, r22
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:148

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  e6:	81 11       	cpse	r24, r1
  e8:	d3 df       	rcall	.-90     	; 0x90 <turnOffPWM>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:150

  out = portOutputRegister(port);
  ea:	ec 2f       	mov	r30, r28
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	e6 5d       	subi	r30, 0xD6	; 214
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	a5 91       	lpm	r26, Z+
  f8:	b4 91       	lpm	r27, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:153

  if (val == LOW) {
    uint8_t oldSREG = SREG;
  fa:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:152
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
  fc:	11 11       	cpse	r17, r1
  fe:	0a c0       	rjmp	.+20     	; 0x114 <digitalWrite+0x56>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:154
    uint8_t oldSREG = SREG;
    cli();
 100:	f8 94       	cli
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:155
    *out &= ~bit;
 102:	ec 91       	ld	r30, X
 104:	d0 95       	com	r29
 106:	de 23       	and	r29, r30
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:160
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
 108:	dc 93       	st	X, r29
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:161
    SREG = oldSREG;
 10a:	8f bf       	out	0x3f, r24	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:163
  }
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	08 95       	ret
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:159
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
 114:	f8 94       	cli
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:160
    *out |= bit;
 116:	ec 91       	ld	r30, X
 118:	de 2b       	or	r29, r30
 11a:	f6 cf       	rjmp	.-20     	; 0x108 <digitalWrite+0x4a>

0000011c <pinMode>:
pinMode():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:34
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
 120:	87 ff       	sbrs	r24, 7
 122:	09 c0       	rjmp	.+18     	; 0x136 <pinMode+0x1a>
 124:	8f 77       	andi	r24, 0x7F	; 127
 126:	71 f1       	breq	.+92     	; 0x184 <pinMode+0x68>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	71 f1       	breq	.+92     	; 0x188 <pinMode+0x6c>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	71 f1       	breq	.+92     	; 0x18c <pinMode+0x70>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	71 f1       	breq	.+92     	; 0x190 <pinMode+0x74>
 134:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:35
  uint8_t bit = digitalPinToBitMask(pin);
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	ea 5c       	subi	r30, 0xCA	; 202
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	24 91       	lpm	r18, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
 140:	80 5d       	subi	r24, 0xD0	; 208
 142:	9f 4f       	sbci	r25, 0xFF	; 255
 144:	fc 01       	movw	r30, r24
 146:	84 91       	lpm	r24, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 148:	88 23       	and	r24, r24
 14a:	c9 f0       	breq	.+50     	; 0x17e <pinMode+0x62>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:41

  reg = portModeRegister(port);
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	fc 01       	movw	r30, r24
 154:	ec 5d       	subi	r30, 0xDC	; 220
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	a5 91       	lpm	r26, Z+
 15a:	b4 91       	lpm	r27, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:42
  out = portOutputRegister(port);
 15c:	fc 01       	movw	r30, r24
 15e:	e6 5d       	subi	r30, 0xD6	; 214
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	c5 91       	lpm	r28, Z+
 164:	d4 91       	lpm	r29, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:44

  if (mode == INPUT) {
 166:	61 11       	cpse	r22, r1
 168:	15 c0       	rjmp	.+42     	; 0x194 <pinMode+0x78>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
 16a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:46
                cli();
 16c:	f8 94       	cli
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:47
    *reg &= ~bit;
 16e:	8c 91       	ld	r24, X
 170:	20 95       	com	r18
 172:	82 23       	and	r24, r18
 174:	8c 93       	st	X, r24
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:48
    *out &= ~bit;
 176:	88 81       	ld	r24, Y
 178:	28 23       	and	r18, r24
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:54
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out |= bit;
 17a:	28 83       	st	Y, r18
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:55
    SREG = oldSREG;
 17c:	9f bf       	out	0x3f, r25	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:34
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	d7 cf       	rjmp	.-82     	; 0x136 <pinMode+0x1a>
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	d5 cf       	rjmp	.-86     	; 0x136 <pinMode+0x1a>
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	d3 cf       	rjmp	.-90     	; 0x136 <pinMode+0x1a>
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	d1 cf       	rjmp	.-94     	; 0x136 <pinMode+0x1a>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:50
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 194:	62 30       	cpi	r22, 0x02	; 2
 196:	51 f4       	brne	.+20     	; 0x1ac <pinMode+0x90>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:51
    uint8_t oldSREG = SREG;
 198:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:52
                cli();
 19a:	f8 94       	cli
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:53
    *reg &= ~bit;
 19c:	3c 91       	ld	r19, X
 19e:	82 2f       	mov	r24, r18
 1a0:	80 95       	com	r24
 1a2:	83 23       	and	r24, r19
 1a4:	8c 93       	st	X, r24
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:54
    *out |= bit;
 1a6:	e8 81       	ld	r30, Y
 1a8:	2e 2b       	or	r18, r30
 1aa:	e7 cf       	rjmp	.-50     	; 0x17a <pinMode+0x5e>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:57
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 1ac:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:58
                cli();
 1ae:	f8 94       	cli
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:59
    *reg |= bit;
 1b0:	ec 91       	ld	r30, X
 1b2:	2e 2b       	or	r18, r30
 1b4:	2c 93       	st	X, r18
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
 1b6:	8f bf       	out	0x3f, r24	; 63
 1b8:	e2 cf       	rjmp	.-60     	; 0x17e <pinMode+0x62>

000001ba <micros>:
micros():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:190
}

unsigned long micros()
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
 1ba:	3f b7       	in	r19, 0x3f	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:192

  cli();
 1bc:	f8 94       	cli
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:193
  m = millis_timer_overflow_count;
 1be:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <millis_timer_overflow_count>
 1c2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <millis_timer_overflow_count+0x1>
 1c6:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <millis_timer_overflow_count+0x2>
 1ca:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <millis_timer_overflow_count+0x3>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:195
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
 1ce:	22 b7       	in	r18, 0x32	; 50
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:210

#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    m++;
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR & _BV(TOV0)) && (t < 255))
 1d0:	08 b6       	in	r0, 0x38	; 56
 1d2:	01 fe       	sbrs	r0, 1
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <micros+0x26>
 1d6:	2f 3f       	cpi	r18, 0xFF	; 255
 1d8:	19 f0       	breq	.+6      	; 0x1e0 <micros+0x26>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:211
    m++;
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	a1 1d       	adc	r26, r1
 1de:	b1 1d       	adc	r27, r1
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:220
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
 1e0:	3f bf       	out	0x3f, r19	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:227

#if F_CPU < 1000000L
  return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
 1e2:	ba 2f       	mov	r27, r26
 1e4:	a9 2f       	mov	r26, r25
 1e6:	98 2f       	mov	r25, r24
 1e8:	88 27       	eor	r24, r24
 1ea:	bc 01       	movw	r22, r24
 1ec:	cd 01       	movw	r24, r26
 1ee:	62 0f       	add	r22, r18
 1f0:	71 1d       	adc	r23, r1
 1f2:	81 1d       	adc	r24, r1
 1f4:	91 1d       	adc	r25, r1
 1f6:	43 e0       	ldi	r20, 0x03	; 3
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	88 1f       	adc	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	4a 95       	dec	r20
 202:	d1 f7       	brne	.-12     	; 0x1f8 <micros+0x3e>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:270
  //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
  //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
  return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
#endif
#endif
}
 204:	08 95       	ret

00000206 <delay>:
delay():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:280
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
{
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	6b 01       	movw	r12, r22
 214:	7c 01       	movw	r14, r24
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:282
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
 216:	d1 df       	rcall	.-94     	; 0x1ba <micros>
 218:	eb 01       	movw	r28, r22
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:284

  while (ms > 0) {
 21a:	c1 14       	cp	r12, r1
 21c:	d1 04       	cpc	r13, r1
 21e:	e1 04       	cpc	r14, r1
 220:	f1 04       	cpc	r15, r1
 222:	41 f4       	brne	.+16     	; 0x234 <delay+0x2e>
 224:	12 c0       	rjmp	.+36     	; 0x24a <delay+0x44>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:287
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
      ms--;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	c8 1a       	sub	r12, r24
 22a:	d1 08       	sbc	r13, r1
 22c:	e1 08       	sbc	r14, r1
 22e:	f1 08       	sbc	r15, r1
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:288
      start += 1000;
 230:	c8 51       	subi	r28, 0x18	; 24
 232:	dc 4f       	sbci	r29, 0xFC	; 252
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:286
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
 234:	c2 df       	rcall	.-124    	; 0x1ba <micros>
 236:	6c 1b       	sub	r22, r28
 238:	7d 0b       	sbc	r23, r29
 23a:	68 3e       	cpi	r22, 0xE8	; 232
 23c:	73 40       	sbci	r23, 0x03	; 3
 23e:	68 f3       	brcs	.-38     	; 0x21a <delay+0x14>
 240:	c1 14       	cp	r12, r1
 242:	d1 04       	cpc	r13, r1
 244:	e1 04       	cpc	r14, r1
 246:	f1 04       	cpc	r15, r1
 248:	71 f7       	brne	.-36     	; 0x226 <delay+0x20>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:296
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	08 95       	ret

00000258 <millis>:
millis():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:176
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
 258:	2f b7       	in	r18, 0x3f	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:180

  // disable interrupts while we read millis_timer_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
  cli();
 25a:	f8 94       	cli
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:181
  m = millis_timer_millis;
 25c:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <millis_timer_millis>
 260:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <millis_timer_millis+0x1>
 264:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <millis_timer_millis+0x2>
 268:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <millis_timer_millis+0x3>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:182
  SREG = oldSREG;
 26c:	2f bf       	out	0x3f, r18	; 63
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:185

  return m;
}
 26e:	08 95       	ret

00000270 <Bounce::setPinMode(int, int)>:
_ZN6Bounce10setPinModeEii():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:228


	uint8_t pin;

	virtual bool readCurrentState() { return digitalRead(pin); }
	virtual void setPinMode(int pin, int mode) {
 270:	86 2f       	mov	r24, r22
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:232
#if defined(ARDUINO_ARCH_STM32F1)
		pinMode(pin, (WiringPinMode)mode);
#else
		pinMode(pin, mode);
 272:	64 2f       	mov	r22, r20
 274:	53 cf       	rjmp	.-346    	; 0x11c <pinMode>

00000276 <Bounce::readCurrentState()>:
_ZN6Bounce16readCurrentStateEv():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:227
protected:


	uint8_t pin;

	virtual bool readCurrentState() { return digitalRead(pin); }
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	fc 01       	movw	r30, r24
 27c:	21 89       	ldd	r18, Z+17	; 0x11
digitalRead():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:167
  }
}

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
 27e:	27 ff       	sbrs	r18, 7
 280:	09 c0       	rjmp	.+18     	; 0x294 <Bounce::readCurrentState()+0x1e>
 282:	2f 77       	andi	r18, 0x7F	; 127
 284:	49 f1       	breq	.+82     	; 0x2d8 <Bounce::readCurrentState()+0x62>
 286:	21 30       	cpi	r18, 0x01	; 1
 288:	49 f1       	breq	.+82     	; 0x2dc <Bounce::readCurrentState()+0x66>
 28a:	22 30       	cpi	r18, 0x02	; 2
 28c:	49 f1       	breq	.+82     	; 0x2e0 <Bounce::readCurrentState()+0x6a>
 28e:	23 30       	cpi	r18, 0x03	; 3
 290:	49 f1       	breq	.+82     	; 0x2e4 <Bounce::readCurrentState()+0x6e>
_ZN6Bounce16readCurrentStateEv():
 292:	2f ef       	ldi	r18, 0xFF	; 255
digitalRead():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:168
  uint8_t timer = digitalPinToTimer(pin);
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	e4 5c       	subi	r30, 0xC4	; 196
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	84 91       	lpm	r24, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:169
  uint8_t bit = digitalPinToBitMask(pin);
 29e:	f9 01       	movw	r30, r18
 2a0:	ea 5c       	subi	r30, 0xCA	; 202
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	d4 91       	lpm	r29, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:170
  uint8_t port = digitalPinToPort(pin);
 2a6:	f9 01       	movw	r30, r18
 2a8:	e0 5d       	subi	r30, 0xD0	; 208
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	c4 91       	lpm	r28, Z
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:172

  if (port == NOT_A_PIN) return LOW;
 2ae:	cc 23       	and	r28, r28
 2b0:	71 f0       	breq	.+28     	; 0x2ce <Bounce::readCurrentState()+0x58>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:176

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 2b2:	81 11       	cpse	r24, r1
 2b4:	ed de       	rcall	.-550    	; 0x90 <turnOffPWM>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:178

  if (*portInputRegister(port) & bit) return HIGH;
 2b6:	ec 2f       	mov	r30, r28
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	e2 5e       	subi	r30, 0xE2	; 226
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	a5 91       	lpm	r26, Z+
 2c4:	b4 91       	lpm	r27, Z
 2c6:	ec 91       	ld	r30, X
 2c8:	ed 23       	and	r30, r29
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <Bounce::readCurrentState()+0x5a>
_ZN6Bounce16readCurrentStateEv():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:172
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
 2ce:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:227
 2d0:	81 70       	andi	r24, 0x01	; 1
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:167
  }
}

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
 2d8:	25 e0       	ldi	r18, 0x05	; 5
 2da:	dc cf       	rjmp	.-72     	; 0x294 <Bounce::readCurrentState()+0x1e>
 2dc:	22 e0       	ldi	r18, 0x02	; 2
 2de:	da cf       	rjmp	.-76     	; 0x294 <Bounce::readCurrentState()+0x1e>
 2e0:	24 e0       	ldi	r18, 0x04	; 4
 2e2:	d8 cf       	rjmp	.-80     	; 0x294 <Bounce::readCurrentState()+0x1e>
 2e4:	23 e0       	ldi	r18, 0x03	; 3
 2e6:	d6 cf       	rjmp	.-84     	; 0x294 <Bounce::readCurrentState()+0x1e>

000002e8 <Debouncer::begin() [clone .constprop.2]>:
_ZN9Debouncer5beginEv.constprop.2():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:19
void Debouncer::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
}

void Debouncer::begin() {
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:20
	 state = 0;
 2ee:	18 86       	std	Y+8, r1	; 0x08
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:21
    if (readCurrentState()) {
 2f0:	c2 df       	rcall	.-124    	; 0x276 <Bounce::readCurrentState()>
 2f2:	88 23       	and	r24, r24
 2f4:	19 f0       	breq	.+6      	; 0x2fc <Debouncer::begin() [clone .constprop.2]+0x14>
_ZN9Debouncer12setStateFlagEh():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:72
  static const uint8_t UNSTABLE_STATE  = 0b00000010;
  static const uint8_t CHANGED_STATE   = 0b00000100;

private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
 2f6:	88 85       	ldd	r24, Y+8	; 0x08
 2f8:	83 60       	ori	r24, 0x03	; 3
 2fa:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer5beginEv.constprop.2():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:28
    }

	#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
 2fc:	ad df       	rcall	.-166    	; 0x258 <millis>
 2fe:	6a 83       	std	Y+2, r22	; 0x02
 300:	7b 83       	std	Y+3, r23	; 0x03
 302:	8c 83       	std	Y+4, r24	; 0x04
 304:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:30
#endif
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <Debouncer::update() [clone .constprop.0]>:
_ZN9Debouncer6updateEv.constprop.0():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:32

bool Debouncer::update()
 30c:	cf 92       	push	r12
 30e:	df 92       	push	r13
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	ec 01       	movw	r28, r24
_ZN9Debouncer14unsetStateFlagEh():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:73
  inline void unsetStateFlag(const uint8_t flag)  {state &= ~flag;}
 31e:	88 85       	ldd	r24, Y+8	; 0x08
 320:	8b 7f       	andi	r24, 0xFB	; 251
 322:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer6updateEv.constprop.0():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:76
    }
    
    
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = readCurrentState();
 324:	ce 01       	movw	r24, r28
 326:	a7 df       	rcall	.-178    	; 0x276 <Bounce::readCurrentState()>
 328:	18 2f       	mov	r17, r24
_ZN9Debouncer12getStateFlagEh():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:75
  inline void toggleStateFlag(const uint8_t flag) {state ^= flag;}
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
 32a:	88 85       	ldd	r24, Y+8	; 0x08
 32c:	86 95       	lsr	r24
 32e:	81 70       	andi	r24, 0x01	; 1
_ZN9Debouncer6updateEv.constprop.0():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:80
    

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != getStateFlag(UNSTABLE_STATE) ) {
 330:	18 17       	cp	r17, r24
 332:	b1 f0       	breq	.+44     	; 0x360 <Debouncer::update() [clone .constprop.0]+0x54>
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:81
        previous_millis = millis();
 334:	91 df       	rcall	.-222    	; 0x258 <millis>
 336:	6a 83       	std	Y+2, r22	; 0x02
 338:	7b 83       	std	Y+3, r23	; 0x03
 33a:	8c 83       	std	Y+4, r24	; 0x04
 33c:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:74

private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
  inline void unsetStateFlag(const uint8_t flag)  {state &= ~flag;}
  inline void toggleStateFlag(const uint8_t flag) {state ^= flag;}
 33e:	88 85       	ldd	r24, Y+8	; 0x08
 340:	92 e0       	ldi	r25, 0x02	; 2
 342:	89 27       	eor	r24, r25
 344:	88 87       	std	Y+8, r24	; 0x08
_ZN9Debouncer12getStateFlagEh():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:75
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
 346:	88 85       	ldd	r24, Y+8	; 0x08
_ZN9Debouncer6updateEv.constprop.0():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:100
    
#endif

		return  changed(); 

}
 348:	82 fb       	bst	r24, 2
 34a:	88 27       	eor	r24, r24
 34c:	80 f9       	bld	r24, 0
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	08 95       	ret
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:84
    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != getStateFlag(UNSTABLE_STATE) ) {
        previous_millis = millis();
         toggleStateFlag(UNSTABLE_STATE);
    } else
        if ( millis() - previous_millis >= interval_millis ) {
 360:	7b df       	rcall	.-266    	; 0x258 <millis>
 362:	ca 80       	ldd	r12, Y+2	; 0x02
 364:	db 80       	ldd	r13, Y+3	; 0x03
 366:	ec 80       	ldd	r14, Y+4	; 0x04
 368:	fd 80       	ldd	r15, Y+5	; 0x05
 36a:	ab 01       	movw	r20, r22
 36c:	bc 01       	movw	r22, r24
 36e:	4c 19       	sub	r20, r12
 370:	5d 09       	sbc	r21, r13
 372:	6e 09       	sbc	r22, r14
 374:	7f 09       	sbc	r23, r15
 376:	8e 81       	ldd	r24, Y+6	; 0x06
 378:	9f 81       	ldd	r25, Y+7	; 0x07
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	a0 e0       	ldi	r26, 0x00	; 0
 37e:	48 17       	cp	r20, r24
 380:	59 07       	cpc	r21, r25
 382:	6a 07       	cpc	r22, r26
 384:	7b 07       	cpc	r23, r27
 386:	f8 f2       	brcs	.-66     	; 0x346 <Debouncer::update() [clone .constprop.0]+0x3a>
_ZN9Debouncer12getStateFlagEh():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:75
 388:	88 85       	ldd	r24, Y+8	; 0x08
 38a:	81 70       	andi	r24, 0x01	; 1
_ZN9Debouncer6updateEv.constprop.0():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:87
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if (currentState != getStateFlag(DEBOUNCED_STATE) ) {
 38c:	18 17       	cp	r17, r24
 38e:	d9 f2       	breq	.-74     	; 0x346 <Debouncer::update() [clone .constprop.0]+0x3a>
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:88
                previous_millis = millis();
 390:	63 df       	rcall	.-314    	; 0x258 <millis>
 392:	6a 83       	std	Y+2, r22	; 0x02
 394:	7b 83       	std	Y+3, r23	; 0x03
 396:	8c 83       	std	Y+4, r24	; 0x04
 398:	9d 83       	std	Y+5, r25	; 0x05
_ZN9Debouncer15toggleStateFlagEh():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:74

private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
  inline void unsetStateFlag(const uint8_t flag)  {state &= ~flag;}
  inline void toggleStateFlag(const uint8_t flag) {state ^= flag;}
 39a:	88 85       	ldd	r24, Y+8	; 0x08
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	89 27       	eor	r24, r25
_ZN9Debouncer12setStateFlagEh():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.h:72
  static const uint8_t UNSTABLE_STATE  = 0b00000010;
  static const uint8_t CHANGED_STATE   = 0b00000100;

private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
 3a0:	84 60       	ori	r24, 0x04	; 4
 3a2:	88 87       	std	Y+8, r24	; 0x08
changeState():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:114
}

inline void Debouncer::changeState() {
	toggleStateFlag(DEBOUNCED_STATE);
	setStateFlag(CHANGED_STATE) ;
	durationOfPreviousState = millis() - stateChangeLastTime;
 3a4:	59 df       	rcall	.-334    	; 0x258 <millis>
 3a6:	09 85       	ldd	r16, Y+9	; 0x09
 3a8:	1a 85       	ldd	r17, Y+10	; 0x0a
 3aa:	2b 85       	ldd	r18, Y+11	; 0x0b
 3ac:	3c 85       	ldd	r19, Y+12	; 0x0c
 3ae:	60 1b       	sub	r22, r16
 3b0:	71 0b       	sbc	r23, r17
 3b2:	82 0b       	sbc	r24, r18
 3b4:	93 0b       	sbc	r25, r19
 3b6:	6d 87       	std	Y+13, r22	; 0x0d
 3b8:	7e 87       	std	Y+14, r23	; 0x0e
 3ba:	8f 87       	std	Y+15, r24	; 0x0f
 3bc:	98 8b       	std	Y+16, r25	; 0x10
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:115
	stateChangeLastTime = millis();
 3be:	4c df       	rcall	.-360    	; 0x258 <millis>
 3c0:	69 87       	std	Y+9, r22	; 0x09
 3c2:	7a 87       	std	Y+10, r23	; 0x0a
 3c4:	8b 87       	std	Y+11, r24	; 0x0b
 3c6:	9c 87       	std	Y+12, r25	; 0x0c
 3c8:	be cf       	rjmp	.-132    	; 0x346 <Debouncer::update() [clone .constprop.0]+0x3a>

000003ca <SendTX(int)>:
_Z6SendTXi():
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:73
 
}



void SendTX(int Timing){          // 1=dit  3-Dah
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	8c 01       	movw	r16, r24
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:76
//    tone(HP,800); 
    #ifndef DEBUG         
      digitalWrite(HP,HIGH);
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	72 de       	rcall	.-796    	; 0xbe <digitalWrite>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:79
    #endif

    digitalWrite(TX,HIGH);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	6f de       	rcall	.-802    	; 0xbe <digitalWrite>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:80
    delay(Timing * CharSpace);// spend Dah length tone
 3e0:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__data_start>
 3e4:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <__data_start+0x1>
 3e8:	ce 01       	movw	r24, r28
 3ea:	b8 01       	movw	r22, r16
 3ec:	20 d1       	rcall	.+576    	; 0x62e <__mulhi3>
 3ee:	bc 01       	movw	r22, r24
 3f0:	99 0f       	add	r25, r25
 3f2:	88 0b       	sbc	r24, r24
 3f4:	99 0b       	sbc	r25, r25
 3f6:	07 df       	rcall	.-498    	; 0x206 <delay>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:82
    #ifndef DEBUG         
      digitalWrite(HP,LOW);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	60 de       	rcall	.-832    	; 0xbe <digitalWrite>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:85
    #endif
    //noTone(spkPin); 
    digitalWrite(TX,LOW);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	84 e0       	ldi	r24, 0x04	; 4
 402:	5d de       	rcall	.-838    	; 0xbe <digitalWrite>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:86
    delay (CharSpace-40);// add char space mins 40ms ( temps execution des dogital write
 404:	be 01       	movw	r22, r28
 406:	68 52       	subi	r22, 0x28	; 40
 408:	71 09       	sbc	r23, r1
 40a:	07 2e       	mov	r0, r23
 40c:	00 0c       	add	r0, r0
 40e:	88 0b       	sbc	r24, r24
 410:	99 0b       	sbc	r25, r25
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:88

}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:86
    #ifndef DEBUG         
      digitalWrite(HP,LOW);
    #endif
    //noTone(spkPin); 
    digitalWrite(TX,LOW);
    delay (CharSpace-40);// add char space mins 40ms ( temps execution des dogital write
 41a:	f5 ce       	rjmp	.-534    	; 0x206 <delay>

0000041c <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((weak, __noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
 41c:	46 d1       	rcall	.+652    	; 0x6aa <abort>

0000041e <__vector_5>:
__vector_5():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:133
#else

#error Millis() timer not defined!

#endif
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
 430:	af 93       	push	r26
 432:	bf 93       	push	r27
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:136
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
 434:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <millis_timer_millis>
 438:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <millis_timer_millis+0x1>
 43c:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <millis_timer_millis+0x2>
 440:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <millis_timer_millis+0x3>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:137
  unsigned char f = millis_timer_fract;
 444:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <__data_end>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:149
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
 448:	26 e0       	ldi	r18, 0x06	; 6
 44a:	23 0f       	add	r18, r19
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:151

  if (f >= FRACT_MAX)
 44c:	2d 37       	cpi	r18, 0x7D	; 125
 44e:	68 f1       	brcs	.+90     	; 0x4aa <__vector_5+0x8c>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:153
  {
    f -= FRACT_MAX;
 450:	29 e8       	ldi	r18, 0x89	; 137
 452:	23 0f       	add	r18, r19
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:155
  m += 1;
    m += MILLIS_INC;
 454:	03 96       	adiw	r24, 0x03	; 3
 456:	a1 1d       	adc	r26, r1
 458:	b1 1d       	adc	r27, r1
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:162
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
 45a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__data_end>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:163
  millis_timer_millis = m;
 45e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <millis_timer_millis>
 462:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <millis_timer_millis+0x1>
 466:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <millis_timer_millis+0x2>
 46a:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <millis_timer_millis+0x3>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:164
  millis_timer_overflow_count++;
 46e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <millis_timer_overflow_count>
 472:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <millis_timer_overflow_count+0x1>
 476:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <millis_timer_overflow_count+0x2>
 47a:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <millis_timer_overflow_count+0x3>
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	a1 1d       	adc	r26, r1
 482:	b1 1d       	adc	r27, r1
 484:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <millis_timer_overflow_count>
 488:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <millis_timer_overflow_count+0x1>
 48c:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <millis_timer_overflow_count+0x2>
 490:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <millis_timer_overflow_count+0x3>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:171

//MICROSECONDS_PER_MILLIS_OVERFLOW=2048
//MILLIS_INC=2
//FRACT_INC=6
//FRACT_MAX=125
}
 494:	bf 91       	pop	r27
 496:	af 91       	pop	r26
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:159
  m += 1;
    m += MILLIS_INC;
  }
  else
  {
    m += MILLIS_INC;
 4aa:	02 96       	adiw	r24, 0x02	; 2
 4ac:	a1 1d       	adc	r26, r1
 4ae:	b1 1d       	adc	r27, r1
 4b0:	d4 cf       	rjmp	.-88     	; 0x45a <__vector_5+0x3c>

000004b2 <main>:
main():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/main.cpp:6
#include <Arduino.h>

int main(void)
{
  #ifdef TUNED_OSCCAL_VALUE
  OSCCAL = TUNED_OSCCAL_VALUE; //set the oscillator calibration value based on the pins_arduino.h file. If this is not set, it will be optimised away
 4b2:	81 b7       	in	r24, 0x31	; 49
 4b4:	81 bf       	out	0x31, r24	; 49
init():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:699
    } else {
      OSCCAL += 5;
    }
  }
  #endif
  sei();
 4b6:	78 94       	sei
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:831
  #endif
  #endif

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0) && defined(WGM01)
  sbi(TCCR0A, WGM01);
 4b8:	8a b5       	in	r24, 0x2a	; 42
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	8a bd       	out	0x2a, r24	; 42
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:832
  sbi(TCCR0A, WGM00);
 4be:	8a b5       	in	r24, 0x2a	; 42
 4c0:	81 60       	ori	r24, 0x01	; 1
 4c2:	8a bd       	out	0x2a, r24	; 42
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:855
  #endif

  // Millis timer is always processor clock divided by MillisTimer_Prescale_Value (64)
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
   #ifdef TCCR0B
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | (MillisTimer_Prescale_Index << CS00);
 4c4:	83 b7       	in	r24, 0x33	; 51
 4c6:	88 7f       	andi	r24, 0xF8	; 248
 4c8:	83 60       	ori	r24, 0x03	; 3
 4ca:	83 bf       	out	0x33, r24	; 51
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:867
  TCCR1B = (TCCR1B & ~((1<<CS13)|(1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #elif (TIMER_TO_USE_FOR_MILLIS == 1)
  TCCR1B = (TCCR1B & ~((1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #endif
  // this needs to be called before setup() or some functions won't work there
  sei();
 4cc:	78 94       	sei
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:872

  #ifndef DISABLEMILLIS
  // Enable the overlow interrupt (this is the basic system tic-toc for millis)
  #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK, TOIE0);
 4ce:	89 b7       	in	r24, 0x39	; 57
 4d0:	82 60       	ori	r24, 0x02	; 2
 4d2:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:507
  TCCR0B |= (ToneTimer_Prescale_Index << CS00);
  #elif defined(__AVR_ATtiny43__)
  TCCR1A = 3; //WGM 10=1, WGM11=1
  TCCR1B = 3; //prescaler of 64
  #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1)
  TCCR1 &= ~((1<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10)); //stop the clock to configure
 4d4:	80 b7       	in	r24, 0x30	; 48
 4d6:	80 7f       	andi	r24, 0xF0	; 240
 4d8:	80 bf       	out	0x30, r24	; 48
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:509
  // Use the Tone Timer for fast PWM as phase correct not supported by this timer
  sbi(TCCR1, CTC1);
 4da:	80 b7       	in	r24, 0x30	; 48
 4dc:	80 68       	ori	r24, 0x80	; 128
 4de:	80 bf       	out	0x30, r24	; 48
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:511
  //#if !defined(__AVR_ATtiny85__)
  sbi(TCCR1, PWM1A); //for the tiny 85, Timer0 is used instead.
 4e0:	80 b7       	in	r24, 0x30	; 48
 4e2:	80 64       	ori	r24, 0x40	; 64
 4e4:	80 bf       	out	0x30, r24	; 48
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:513
  //#endif
  sbi(GTCCR, PWM1B);
 4e6:	8c b5       	in	r24, 0x2c	; 44
 4e8:	80 64       	ori	r24, 0x40	; 64
 4ea:	8c bd       	out	0x2c, r24	; 44
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:514
  OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	8d bd       	out	0x2d, r24	; 45
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:515
  TCCR1 |= (ToneTimer_Prescale_Index << CS10);
 4f0:	80 b7       	in	r24, 0x30	; 48
 4f2:	87 60       	ori	r24, 0x07	; 7
 4f4:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:893

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
  #if defined(ADCSRA)
    // set a2d prescale factor
  ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 4f6:	86 b1       	in	r24, 0x06	; 6
 4f8:	88 77       	andi	r24, 0x78	; 120
 4fa:	86 68       	ori	r24, 0x86	; 134
 4fc:	86 b9       	out	0x06, r24	; 6
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:895
    // enable a2d conversions
    sbi(ADCSRA, ADEN);
 4fe:	37 9a       	sbi	0x06, 7	; 6
analogReference():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_analog.c:45
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  // fix? Validate the mode?
  analog_reference = mode;
 500:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <analog_reference>
setup():
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:94


void setup() {
  
  analogReference(DEFAULT);
  pinMode(Speed,INPUT); 
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	09 de       	rcall	.-1006   	; 0x11c <pinMode>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:95
  pinMode(Dit,INPUT_PULLUP); 
 50a:	62 e0       	ldi	r22, 0x02	; 2
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	06 de       	rcall	.-1012   	; 0x11c <pinMode>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:96
  pinMode(Dah,INPUT_PULLUP); 
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	03 de       	rcall	.-1018   	; 0x11c <pinMode>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:97
  pinMode(TX, OUTPUT); 
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	84 e0       	ldi	r24, 0x04	; 4
 51a:	00 de       	rcall	.-1024   	; 0x11c <pinMode>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:98
  digitalWrite(TX, LOW);
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	ce dd       	rcall	.-1124   	; 0xbe <digitalWrite>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:104
  #ifdef DEBUG         
    mySerial.begin(9600);             
    mySerial.println("START");
    delay(1000);
  #else
    pinMode(HP, OUTPUT); 
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	fa dd       	rcall	.-1036   	; 0x11c <pinMode>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:105
    digitalWrite(HP, LOW);
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	c8 dd       	rcall	.-1136   	; 0xbe <digitalWrite>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:106
    delay(2000);
 52e:	60 ed       	ldi	r22, 0xD0	; 208
 530:	77 e0       	ldi	r23, 0x07	; 7
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	67 de       	rcall	.-818    	; 0x206 <delay>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:107
    digitalWrite(HP, HIGH);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	c0 dd       	rcall	.-1152   	; 0xbe <digitalWrite>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:108
    delay(2000);
 53e:	60 ed       	ldi	r22, 0xD0	; 208
 540:	77 e0       	ldi	r23, 0x07	; 7
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	5f de       	rcall	.-834    	; 0x206 <delay>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:109
    digitalWrite(HP, LOW);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	b8 dd       	rcall	.-1168   	; 0xbe <digitalWrite>
attach():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:143
Bounce::Bounce()
    : pin(0)
{}

void Bounce::attach(int pin) {
    this->pin = pin;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <debouncerDit+0x11>
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:146
    
    // SET INITIAL STATE
    begin();
 554:	86 e8       	ldi	r24, 0x86	; 134
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	c7 de       	rcall	.-626    	; 0x2e8 <Debouncer::begin() [clone .constprop.2]>
interval():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:16
    , interval_millis(10)
    , state(0) {}

void Debouncer::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
 55a:	c5 e0       	ldi	r28, 0x05	; 5
 55c:	d0 e0       	ldi	r29, 0x00	; 0
 55e:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <debouncerDit+0x7>
 562:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <debouncerDit+0x6>
attach():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:143
Bounce::Bounce()
    : pin(0)
{}

void Bounce::attach(int pin) {
    this->pin = pin;
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <debouncerDah+0x11>
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:146
    
    // SET INITIAL STATE
    begin();
 56c:	84 e7       	ldi	r24, 0x74	; 116
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	bb de       	rcall	.-650    	; 0x2e8 <Debouncer::begin() [clone .constprop.2]>
interval():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:16
    , interval_millis(10)
    , state(0) {}

void Debouncer::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
 572:	d0 93 7b 00 	sts	0x007B, r29	; 0x80007b <debouncerDah+0x7>
 576:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <debouncerDah+0x6>
setup():
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:123
  debouncerDit.interval(5); // interval in ms

  debouncerDah.attach(Dah);
  debouncerDah.interval(5); // interval in ms

  delay(3000);
 57a:	68 eb       	ldi	r22, 0xB8	; 184
 57c:	7b e0       	ldi	r23, 0x0B	; 11
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	41 de       	rcall	.-894    	; 0x206 <delay>
analogRead():
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	87 b9       	out	0x07, r24	; 7
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_analog.c:74
  #if defined(REFS2)
  ADMUX |= (((analog_reference & 0x04) >> 2) << REFS2); //some have an extra reference bit in a weird position.
 588:	97 b1       	in	r25, 0x07	; 7
 58a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <analog_reference>
 58e:	88 0f       	add	r24, r24
 590:	88 0f       	add	r24, r24
 592:	80 71       	andi	r24, 0x10	; 16
 594:	89 2b       	or	r24, r25
 596:	87 b9       	out	0x07, r24	; 7
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_analog.c:79
  #endif
  #endif

  #if defined(HAVE_ADC) && HAVE_ADC
  sbi(ADCSRA, ADSC); //Start conversion
 598:	36 9a       	sbi	0x06, 6	; 6
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_analog.c:81

  while(ADCSRA & (1<<ADSC)); //Wait for conversion to complete.
 59a:	36 99       	sbic	0x06, 6	; 6
 59c:	fe cf       	rjmp	.-4      	; 0x59a <main+0xe8>
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_analog.c:83

  uint8_t low = ADCL;
 59e:	94 b1       	in	r25, 0x04	; 4
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_analog.c:84
  uint8_t high = ADCH;
 5a0:	85 b1       	in	r24, 0x05	; 5
C:\Users\DELTA Consulting\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_analog.c:85
  return (high << 8) | low;
 5a2:	89 27       	eor	r24, r25
 5a4:	98 27       	eor	r25, r24
 5a6:	89 27       	eor	r24, r25
ReadSpeed():
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:61


void ReadSpeed()
{
 int SpeedValue=analogRead(Speed); 
 CharSpace=(CharSpace+SpeedValue)/6;  // 1024+125=1150 /6-> MAX  125/6 ->MIN
 5a8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 5ac:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 5b0:	82 0f       	add	r24, r18
 5b2:	93 1f       	adc	r25, r19
 5b4:	66 e0       	ldi	r22, 0x06	; 6
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	4b d0       	rcall	.+150    	; 0x650 <__divmodhi4>
 5ba:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__data_start+0x1>
 5be:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
loop():
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:138
          ReadSpeed(); 
          }
  #endif


  debouncerDit.update();
 5c2:	86 e8       	ldi	r24, 0x86	; 134
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	a2 de       	rcall	.-700    	; 0x30c <Debouncer::update() [clone .constprop.0]>
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:139
  debouncerDah.update();
 5c8:	84 e7       	ldi	r24, 0x74	; 116
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	9f de       	rcall	.-706    	; 0x30c <Debouncer::update() [clone .constprop.0]>
 5ce:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <debouncerDit+0x8>
fell():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:130
    return getStateFlag(DEBOUNCED_STATE) && getStateFlag(CHANGED_STATE);
}

bool Debouncer::fell()
{
    return  !getStateFlag(DEBOUNCED_STATE) && getStateFlag(CHANGED_STATE);
 5d2:	80 fd       	sbrc	r24, 0
 5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <main+0x12e>
 5d6:	82 ff       	sbrs	r24, 2
 5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <main+0x12e>
loop():
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:147



   if(debouncerDit.fell())
     { 
      SendTX(1);
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	f5 de       	rcall	.-534    	; 0x3ca <SendTX(int)>
 5e0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <debouncerDah+0x8>
fell():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:130
 5e4:	80 fd       	sbrc	r24, 0
 5e6:	ed cf       	rjmp	.-38     	; 0x5c2 <main+0x110>
 5e8:	82 ff       	sbrs	r24, 2
 5ea:	eb cf       	rjmp	.-42     	; 0x5c2 <main+0x110>
loop():
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:154
        mySerial.println("DIT");
       #endif
     }
   if(debouncerDah.fell())
     {
      SendTX(3);
 5ec:	83 e0       	ldi	r24, 0x03	; 3
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	ec de       	rcall	.-552    	; 0x3ca <SendTX(int)>
 5f2:	e7 cf       	rjmp	.-50     	; 0x5c2 <main+0x110>

000005f4 <_GLOBAL__sub_I_CharSpace>:
_GLOBAL__sub_I_CharSpace():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:12
// DEBOUNCE //
//////////////

Debouncer::Debouncer():previous_millis(0)
    , interval_millis(10)
    , state(0) {}
 5f4:	e6 e8       	ldi	r30, 0x86	; 134
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	12 82       	std	Z+2, r1	; 0x02
 5fa:	13 82       	std	Z+3, r1	; 0x03
 5fc:	14 82       	std	Z+4, r1	; 0x04
 5fe:	15 82       	std	Z+5, r1	; 0x05
 600:	2a e0       	ldi	r18, 0x0A	; 10
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	37 83       	std	Z+7, r19	; 0x07
 606:	26 83       	std	Z+6, r18	; 0x06
 608:	10 86       	std	Z+8, r1	; 0x08
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:139
// BOUNCE //
////////////


Bounce::Bounce()
    : pin(0)
 60a:	86 e6       	ldi	r24, 0x66	; 102
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	91 83       	std	Z+1, r25	; 0x01
 610:	80 83       	st	Z, r24
 612:	11 8a       	std	Z+17, r1	; 0x11
__base_ctor ():
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:12
// DEBOUNCE //
//////////////

Debouncer::Debouncer():previous_millis(0)
    , interval_millis(10)
    , state(0) {}
 614:	e4 e7       	ldi	r30, 0x74	; 116
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	12 82       	std	Z+2, r1	; 0x02
 61a:	13 82       	std	Z+3, r1	; 0x03
 61c:	14 82       	std	Z+4, r1	; 0x04
 61e:	15 82       	std	Z+5, r1	; 0x05
 620:	37 83       	std	Z+7, r19	; 0x07
 622:	26 83       	std	Z+6, r18	; 0x06
 624:	10 86       	std	Z+8, r1	; 0x08
C:\Users\DELTA Consulting\Documents\Arduino\libraries\Bounce2-master\src/Bounce2.cpp:139
// BOUNCE //
////////////


Bounce::Bounce()
    : pin(0)
 626:	91 83       	std	Z+1, r25	; 0x01
 628:	80 83       	st	Z, r24
 62a:	11 8a       	std	Z+17, r1	; 0x11
_GLOBAL__sub_I_CharSpace():
\\Openmediavault\nas-shm\Atelier\Arduino\Iambic_keyer/IAMBIC_Keyer.ino:161
        mySerial.println("DAH");
      #endif
     }
    

}
 62c:	08 95       	ret

0000062e <__mulhi3>:
__mulhi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:312
 62e:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:313
 630:	55 27       	eor	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:314
 632:	04 c0       	rjmp	.+8      	; 0x63c <__mulhi3+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:317
 634:	08 0e       	add	r0, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:318
 636:	59 1f       	adc	r21, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:320
 638:	88 0f       	add	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:321
 63a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:324
 63c:	00 97       	sbiw	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:325
 63e:	29 f0       	breq	.+10     	; 0x64a <__mulhi3+0x1c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:328
 640:	76 95       	lsr	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:329
 642:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:331
 644:	b8 f3       	brcs	.-18     	; 0x634 <__mulhi3+0x6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:335
 646:	71 05       	cpc	r23, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:337
 648:	b9 f7       	brne	.-18     	; 0x638 <__mulhi3+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:340
 64a:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:341
 64c:	95 2f       	mov	r25, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:342
 64e:	08 95       	ret

00000650 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
 650:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
 652:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
 654:	16 f4       	brtc	.+4      	; 0x65a <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
 656:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
 658:	06 d0       	rcall	.+12     	; 0x666 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
 65a:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
 65c:	08 d0       	rcall	.+16     	; 0x66e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
 65e:	0b d0       	rcall	.+22     	; 0x676 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
 660:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
 662:	05 d0       	rcall	.+10     	; 0x66e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
 664:	3e f4       	brtc	.+14     	; 0x674 <__divmodhi4_exit>

00000666 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
 666:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
 668:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
 66c:	08 95       	ret

0000066e <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
 66e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
 670:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
 672:	7f 4f       	sbci	r23, 0xFF	; 255

00000674 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
 674:	08 95       	ret

00000676 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
 676:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
 678:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
 67a:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
 67c:	07 c0       	rjmp	.+14     	; 0x68c <__udivmodhi4_ep>

0000067e <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
 67e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
 680:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
 682:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
 684:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
 686:	10 f0       	brcs	.+4      	; 0x68c <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
 688:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
 68a:	b7 0b       	sbc	r27, r23

0000068c <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
 68c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
 68e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
 690:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
 692:	a9 f7       	brne	.-22     	; 0x67e <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
 694:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
 696:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
 698:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
 69a:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
 69c:	08 95       	ret

0000069e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 69e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 6a0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 6a2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 6a4:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 6a6:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 6a8:	09 94       	ijmp

000006aa <abort>:
abort():
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	f8 94       	cli
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <_exit>

000006b2 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 6b2:	f8 94       	cli

000006b4 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <__stop_program>
